#!/usr/bin/python
from __future__ import division
from astropy.io import fits
import numpy as np
from astropy.wcs import WCS
from astropy.nddata import Cutout2D
import os.path
from argparse import ArgumentParser
import ephem
import time
from scipy.stats import skew
from datetime import datetime, timedelta
#from scipy import stats
#from scipdey.stats import norm
#from scipy.optimize import leastsq,curve_fit,minimize
#from scipy import special
#from scipy.signal import find_peaks
import csv
from subprocess import call
import time
from datetime import datetime, timedelta
from scipy.spatial import distance
##custom 
from mwassa.imginfo import info
from mwassa.curvefitting import skew_norm_pdf, reqCDF, cumulative_distribution_function, getSeedValue, getFloodfillValue
from mwassa.plotting import intialiseMatplotib
from mwassa.adaptiveMasking import mask
from astropy.coordinates import AltAz, SkyCoord, EarthLocation
import astropy.units as u
import math

global thetaArray
thetaArray = []

pos = EarthLocation(lon=116.67083333*u.deg, lat=-26.70331941*u.deg, height=377.827*u.m)
#def radec_to_altaz(ra, dec, time, pos):
#    coord = SkyCoord(ra, dec, unit=(u.deg, u.deg))
#    coord.time = time + timedelta(hours=pos.lon.hourangle)
#    coord = coord.transform_to(AltAz(obstime=time, location=pos))
#    return np.degrees(coord.alt.rad), np.degrees(coord.az.rad)

def radec_to_altaz(ra, dec, time, pos):
    coord = SkyCoord(ra, dec, unit=(u.deg, u.deg))
    coord.time = time + timedelta(hours=pos.lon.hourangle)
    coord = coord.transform_to(AltAz(obstime=time, location=pos))
    return np.degrees(coord.alt.rad), np.degrees(coord.az.rad)



def main():
    
    global thetaArray 
    thetaArray = []

    #w sets MWA as the observer
    mwa = ephem.Observer()
    mwa.lon = '116:40:14.93485'
    mwa.lat = '-26:42:11.94986'
    mwa.elevation = 377.827 #from sea level


    parser = ArgumentParser("theta",description="Finds the minimum angle from phase center")
    parser.add_argument('--noradid',required=True,type=int,help="The norad id of the satellite")
    parser.add_argument('--obs',required=True,type=int,help="The observation id")
    args = parser.parse_args()

    f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexSurveySet2/FULLTLE.txt")
    line = f.readline()
    counter = 1
    while line:
        #print(counter)
        if counter%2 ==1:
            line2 = line
        else:
            line3 = line
            satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
            if satID == args.noradid:
                print("satellite found")
                satline2 = line2
                satline3 = line3
                break
        counter +=1
        line = f.readline()
    #f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexSurveySet3/MEOTLE.txt")
    #line = f.readline()
    #counter = 1
    #while line:
    #    if counter%2 ==1:
    #        line2 = line
    #    else:
    #        line3 = line
    #        satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
    #        if satID == args.noradid:
    #            satline2 = line2
    #            satline3 = line3
    #            break
    #    counter += 1
    #    line = f.readline()
    #f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexSurveySet3/HEOTLE.txt")
    #line = f.readline()
    #counter = 1
    #while line:
    #    if counter%2 ==1:
    #        line2 = line
    #    else:
    #        line3 = line
    #        satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
    #        if satID == args.noradid:
    #            satline2 = line2
    
    #            satline3 = line3
    #            break
    #    counter += 1
    #    line = f.readline()

    sat = ephem.readtle("sat",satline2,satline3)
    
    for t in range(55):
        try:
            hdu = fits.open("6Sigma3floodfillSigmaRFIBinaryMap-t"  + str(t).zfill(4)+ '.fits')
        except:
            continue
	wcs = WCS(hdu[0].header,naxis=2)
        UTCTime = datetime.strptime(hdu[0].header['DATE-OBS'], '%Y-%m-%dT%H:%M:%S.%f')
        mwa.date = UTCTime
        sat.compute(mwa)
        xy = wcs.all_world2pix([[np.degrees(sat.ra.real), np.degrees(sat.dec.real)]], 1)[0]
        x = int(np.floor(xy[0]))
        y = int(np.floor(xy[1]))

	#pixcrd = np.asarray([[y,x]],dtype=np.float64)
	#world = wcs.wcs_pix2world(pixcrd,0)
	#print(world)
	
	#alt, az = radec_to_altaz(world[0,0], world[0,1], UTCTime, pos)

	#el = 90-alt
	theta = np.sqrt((x-700)**2.0+(y-700)**2.0)
	theta = theta*0.0833333
	print("Theta is " + str(theta) + " at i " + str(t))
	#print("el is " + str(el))
	#print("azimuth is " + str(az))
	thetaArray.append(theta)
    thetaArray = np.asarray(thetaArray)
    print("the min value is " + np.min(thetaArray))
if __name__ == "__main__":
    main()
    
