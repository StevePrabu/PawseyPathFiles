#!/usr/bin/python
import os.path
from argparse import ArgumentParser
from astropy.io import fits
import numpy as np
from astropy.wcs import WCS
from astropy.nddata import Cutout2D
import ephem
import time
from datetime import datetime, timedelta
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
plt.style.use("dark_background")

font = {'family' : 'normal','size'   : 2}
mwa = ephem.Observer()
mwa.lon = '116:40:14.93485'
mwa.lat = '-26:42:11.94986'
mwa.elevation = 377.827 #from sea level


def obtainRCS(satid):
    RCS = ""
    w = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexFMSurveySolution/RCS.txt")
    rline = w.readline()
    while rline:
        local_ID =int( rline[13] + rline[14] + rline[15] + rline[16] + rline[17])
        if satid == local_ID:
            local_rcs = str(rline[119] + rline[120] + rline[121] + rline[122] + rline[123] + rline[124] + rline[125] + rline[126])
            RCS = local_rcs.replace(" ", "")
            break
        rline = w.readline()
    return RCS

def main():
    parser = ArgumentParser("RFICombined", description="Plots the satellite locations on top of 6 sigma detections")
    parser.add_argument("--obs", required=True, help="The observation id")
    parser.add_argument("--timeStep", required=True, type=int, help="The timesteps")
    parser.add_argument("--prefix",required=True,help="The prefix used in the output files")
    parser.add_argument("--FULLTLE",required=True, help="Abs path to full tle")
    parser.add_argument("--LEOTLE", required=True, help="Abs path to LEO tle")
    parser.add_argument("--MEOTLE", required=True, help="Abs path to MEO tle")
    parser.add_argument("--HEOTLE", required=True, help="Abs path to HEO tle")
    args = parser.parse_args()

    globalData = np.zeros((1400,1400))
    LeoData = np.zeros((1400,1400))

    for i in range(args.timeStep):
        #hdu = fits.open(str(args.prefix) + "SigmaRFIBinaryMap-t" + str(i).zfill(4) + ".fits" )
        try:
            hdu = fits.open(str(args.prefix) + "SigmaRFIBinaryMap-t" + str(i).zfill(4) + ".fits" )
        except:
            continue
        print("working on timeStep " + str(i))
        globalData += hdu[0].data
        UTCtime = datetime.strptime(hdu[0].header['DATE-OBS'][:-2], '%Y-%m-%dT%H:%M:%S')
        wcs = WCS(hdu[0].header, naxis=2)
        ax = plt.subplot(111, projection=wcs)
        mwa.date = UTCtime

        sat_id_array = []
        f = open(args.FULLTLE)
        line = f.readline()
        counter = 1
        while line:
            if counter%2 ==1:
                line2 = line
            else:
                line3 = line
                satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
                if satID not in sat_id_array:
                    sat_id_array.append(satID)
                    sat = ephem.readtle("sat", str(line2), str(line3))
                    sat.compute(mwa)
                    try:
                        x, y = wcs.all_world2pix([[np.degrees(sat.ra.real), np.degrees(sat.dec.real)]], 1)[0]
                    except:
                        continue
                    radius = np.sqrt((x-700)**2.0+(y-700)**2.0)
                    if  radius <= 550:
                        rcs = obtainRCS(satID)
                        LeoData[int(y),int(x)] =2
                        LeoData[int(y+1),int(x)] =2
                        LeoData[int(y),int(x+1)] =2
                        LeoData[int(y-1),int(x)] =2
                        LeoData[int(y),int(x-1)] =2
                        #if float(sat.range)/1000.0 >= 1500:
                        plt.text(x,y, str(satID) + "r" + str(int(float(sat.range)/1000.0))+ "s" + str(rcs) ,color='black',**font)
        
                    elif (5 <= x <= (1400-5)) and (5<= y < (1400-5)):
                        LeoData[int(y),int(x)] =1
                        LeoData[int(y+1),int(x)] =1
                        LeoData[int(y),int(x+1)] =1
                        LeoData[int(y-1),int(x)] =1
                        LeoData[int(y),int(x-1)] =1
            counter += 1
            line = f.readline()

        globalData = np.ma.masked_where(globalData >0, globalData)
        cmap = plt.cm.Purples
        cmap.set_bad(color='red')
        Points1 = np.asarray(np.where(LeoData==1))
        Points2 = np.asarray(np.where(LeoData==2))
        plt.imshow(globalData, cmap=cmap, origin='lower')
        try:
            ax.scatter(Points1[1,:], Points1[0,:],marker='o',c='blue', s=0.01,alpha=0.7)
            ax.scatter(Points2[1,:], Points2[0,:],marker='o',c='lime', s=0.01, alpha=0.7)
        except:
            print("exception raised")
        plt.grid(color='black',linestyle='-',linewidth='1')
        plt.title(UTCtime)
        plt.xlabel("RA (Degrees)")
        plt.ylabel("DEC (Degrees)")
        plt.savefig("timeLapse" + str(i).zfill(4) + ".png")
        plt.savefig("timeLapseHD" + str(i).zfill(4) + ".png", dpi=1000)





                        






if __name__ == "__main__":
    main()
