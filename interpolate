#!/usr/bin/python
from __future__ import division
import numpy as np
from argparse import ArgumentParser
import sys
sys.path.append("/home/steve")
from mwapy import aocal
from tqdm import tqdm


def flaggedTile(ao, tileNo):
    counter = 0
    for i in range(noChannels):
        if np.all(str(ao[0,tileNo,i,:]) == "[nan+nanj nan+nanj nan+nanj nan+nanj]"):
            counter +=1
    return counter == noChannels

def nan_helper(y):
	return np.isnan(y), lambda z: z.nonzero()[0]


def main():
    parser = ArgumentParser("interpolate", description="interpolates for flagged solution")
    parser.add_argument("--inputFile", required=True, help="The name the input file")
    parser.add_argument("--outputFile", required=True, help="The name of the output file")
    args = parser.parse_args()

    ao = aocal.fromfile(str(args.inputFile))
    global noChannels
    noChannels = ao.shape[2]
    list_of_flagged_tiles = []
    for tile in tqdm(range(128)):
        flagged = flaggedTile(ao, tile)
        if flagged == False:
            tileSolution = ao[0,tile,:,:]
            for p in range(4):
                polSolution = ao[0,tile,:,p]
                polSolutionReal = np.real(polSolution)
                polSolutionImg = np.imag(polSolution)

                nans, x = nan_helper(polSolutionReal)
                polSolutionReal[nans] = np.interp(x(nans), x(~nans), polSolutionReal[~nans])
                
                nans, x = nan_helper(polSolutionImg)
                polSolutionImg[nans] = np.interp(x(nans), x(~nans), polSolutionImg[~nans])

                polSolution = polSolutionReal + polSolutionImg*1j
                ao[0,tile,:,p] = polSolution

        else:
            list_of_flagged_tiles.append(tile)
    ao.tofile(str(args.outputFile))
    print(" The flagged tiles are " + str(list_of_flagged_tiles))


if __name__ == "__main__":
    main()